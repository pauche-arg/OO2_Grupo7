[1mdiff --git a/bin/dao/TicketDao.class b/bin/dao/TicketDao.class[m
[1mindex 4432484..a56ccba 100644[m
Binary files a/bin/dao/TicketDao.class and b/bin/dao/TicketDao.class differ
[1mdiff --git a/bin/datos/SistemaTickets.class b/bin/datos/SistemaTickets.class[m
[1mindex ee35e4d..32a786e 100644[m
Binary files a/bin/datos/SistemaTickets.class and b/bin/datos/SistemaTickets.class differ
[1mdiff --git a/src/dao/TicketDao.java b/src/dao/TicketDao.java[m
[1mindex 1dd08f6..c9d2838 100644[m
[1m--- a/src/dao/TicketDao.java[m
[1m+++ b/src/dao/TicketDao.java[m
[36m@@ -31,8 +31,6 @@[m [mpublic class TicketDao {[m
 		try {[m
 			iniciaOperacion();[m
 			[m
[31m-			System.out.println(objeto.getUsuarioCreador());[m
[31m-			[m
 			UsuarioDao usuarioDao = new UsuarioDao();[m
 			EmpleadoDao empleadoDao = new EmpleadoDao();[m
 			[m
[36m@@ -57,7 +55,6 @@[m [mpublic class TicketDao {[m
 	            objeto.setEmpleadoAsignado(null);[m
 	        }[m
 			[m
[31m-			objeto.setUsuarioCreador(usuario);[m
 			[m
 			id = Integer.parseInt(session.save(objeto).toString());[m
 			tx.commit();[m
[36m@@ -77,18 +74,26 @@[m [mpublic class TicketDao {[m
 			UsuarioDao usuarioDao = new UsuarioDao();[m
 			EmpleadoDao empleadoDao = new EmpleadoDao();[m
 			[m
[31m-			Usuario usuario = usuarioDao.traer(objeto.getUsuarioCreador().getIdUsuario());[m
[31m-	        Empleado empleado = empleadoDao.traer(objeto.getEmpleadoAsignado().getIdUsuario());[m
[31m-	        [m
[31m-	        if (usuario == null) {[m
[31m-	            throw new IllegalArgumentException("TicketDao: Usuario creador no encontrado.");[m
[32m+[m			[32mUsuario usuario = null;[m
[32m+[m			[32mEmpleado empleado = null;[m
[32m+[m[41m	       [m
[32m+[m[41m			[m
[32m+[m	[32m        try {[m[41m [m
[32m+[m	[32m        if (objeto.getUsuarioCreador() != null) {[m
[32m+[m	[32m            Integer idUsuario = objeto.getUsuarioCreador().getIdUsuario();[m
[32m+[m	[32m            usuario = usuarioDao.traer(idUsuario);[m
[32m+[m	[32m            objeto.setUsuarioCreador(usuario);[m
 	        }[m
[31m-	        if (empleado == null) {[m
[31m-	            throw new IllegalArgumentException("TicketDao: Empleado no encontrado");[m
[32m+[m	[32m        } catch (HibernateException he) {[m
[32m+[m	[41m        [m	[32mmanejaExcepcion(he);[m
[32m+[m	[32m        }[m
[32m+[m	[32m        if (objeto.getEmpleadoAsignado() != null) {[m
[32m+[m	[32m            Integer idEmpleado = objeto.getEmpleadoAsignado().getIdUsuario();[m
[32m+[m	[32m            empleado = empleadoDao.traer(idEmpleado);[m
[32m+[m	[32m            objeto.setEmpleadoAsignado(empleado); // puede seguir siendo null si no lo encuentra, dado que cuando los ticket son creados pueden no tener un empleado asignado ae el[m
[32m+[m	[32m        } else {[m
[32m+[m	[32m            objeto.setEmpleadoAsignado(null);[m
 	        }[m
[31m-			[m
[31m-			objeto.setUsuarioCreador(usuario);[m
[31m-			objeto.setEmpleadoAsignado(empleado);[m
 			[m
 			session.update(objeto);[m
 			tx.commit();[m
[1mdiff --git a/src/datos/SistemaTickets.java b/src/datos/SistemaTickets.java[m
[1mindex 6f4ebba..5804ee3 100644[m
[1m--- a/src/datos/SistemaTickets.java[m
[1m+++ b/src/datos/SistemaTickets.java[m
[36m@@ -3,6 +3,8 @@[m [mpackage datos;[m
 import java.util.ArrayList;[m
 import java.util.List;[m
 [m
[32m+[m[32mimport negocio.TicketABM;[m
[32m+[m
 public class SistemaTickets {[m
 	private List<Ticket> tickets;[m
 	private List<Usuario> usuarios;[m
[36m@@ -21,6 +23,16 @@[m [mpublic class SistemaTickets {[m
 	}[m
 	[m
 	[m
[32m+[m	[32m//Empleado y Administrador pueden acceder a este metodo[m
[32m+[m	[32mpublic void cambiarEstado(int idTicket, String nuevoEstado) throws Exception {[m
[32m+[m		[32mTicketABM ticketABM = new TicketABM();[m
[32m+[m		[32mTicket ticket = ticketABM.traerTicket(idTicket);[m
[32m+[m	[32m    if (ticket == null) throw new Exception("Ticket no encontrado.");[m
[32m+[m	[32m    TicketABM.validarEstado(nuevoEstado); // m√©todo para validar que sea un estado v√°lido[m
[32m+[m	[32m    ticket.setEstado(nuevoEstado);[m
[32m+[m	[32m    ticketABM.modificar(ticket);[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
 	[m
 	[m
 	[m
[1mdiff --git a/src/datos/Ticket.java b/src/datos/Ticket.java[m
[1mindex 6bc821c..36ce590 100644[m
[1m--- a/src/datos/Ticket.java[m
[1m+++ b/src/datos/Ticket.java[m
[36m@@ -89,6 +89,9 @@[m [mpublic class Ticket {[m
 	[m
 	[m
 	[m
[32m+[m[41m	[m
[32m+[m[41m	[m
[32m+[m[41m	[m
 }[m
 [m
 [m
